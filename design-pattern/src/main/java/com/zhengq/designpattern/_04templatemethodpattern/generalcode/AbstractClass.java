package com.zhengq.designpattern._04templatemethodpattern.generalcode;

/**
 * 抽象模板类
 * 
 * @ClassName: AbstractClass
 * @Description: <p>
 *               模板方法模式的优点：
 *               </p>
 *               ●封装不变部分，扩展可变部分把认为是不变部分的算法封装到父类实现，而可变部分的则可以通过继承来继续扩展。在悍马模型例子中，
 *               是不是就非常容易扩展？例如增加一个H3型号的悍马模型，很容易呀，增加一个子类，实现父类的基本方法就可以了。<br/>
 *               ●提取公共部分代码，便于维护我们例子中刚刚走过的弯路就是最好的证明，如果我们不抽取到父类中，任由这种散乱的代码发生，
 *               想想后果是什么样子？维护人员为了修正一个缺陷，需要到处查找类似的代码！<br/>
 *               ●行为由父类控制，子类实现基本方法是由子类实现的，因此子类可以通过扩展的方式增加相应的功能，符合开闭原则。
 *               <p>
 *               模板方法模式的缺点：
 *               </p>
 *               按照我们的设计习惯，抽象类负责声明最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法。但是模板方法模式却颠倒了，
 *               抽象类定义了部分抽象方法
 *               ，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，这在复杂的项目中，会带来代码阅读的难度
 *               ，而且也会让新手产生不适感。
 *                <p>
 *               模板方法模式的使用场景：
 *               </p>
 *               ▪  多个子类有公有的方法，并且逻辑基本相同时。<br/>
 *				 ▪  重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。<br/>
 *				 ▪  重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数（见“模板方法模式的扩展”）约束其行为。
 *               <p>
 *               注意：
 *               </p>
 *               抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，
 *               不需要暴露的属性或方法尽量不要设置为protected类型。实现类若非必要，尽量不要扩大父类中的访问权限。
 * @author: Zhenggq
 * @date: 2018年5月4日 上午11:40:47
 */
public abstract class AbstractClass {
	// 基本方法
	protected abstract void doSomething();

	// 基本方法
	protected abstract void doAnything();

	// 模板方法
	public void templateMethod() {
		/**
		 * 调用基本方法，完成相关的逻辑
		 */
		this.doAnything();
		this.doSomething();
	}
}
